{"version":3,"file":"static/js/966.6bab8c17.chunk.js","mappings":"gNAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EACnBC,EAAe,SAAAP,GAAK,OAAIA,EAAMQ,MAAV,EAEpBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACX,EAAgBQ,IACjB,SAACN,EAAUU,GACT,OAAKA,EAEEV,EAASO,QAAO,SAAAI,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAeG,cADvB,IAFFb,CAK7B,I,uCCbUe,EAAYC,EAAAA,GAAAA,IAAH,0C,mBCATC,EAASD,EAAAA,GAAAA,GAAH,4C,SCWnB,EATgB,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,4BACI,SAACF,EAAD,UAASC,IACRC,IAGZ,EAIDF,EAAOG,UAAY,CACfF,MAAOG,IAAAA,OACPF,SAAUE,IAAAA,IAAAA,Y,kCCdDC,GAAgBN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,uFAKbQ,EAAQR,EAAAA,GAAAA,MAAH,kEAILS,GAAQT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,0LAWLW,EAASX,EAAAA,GAAAA,OAAH,4I,UChBbY,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAETE,EAAc,WAEzB,IAAM/B,GAAWgC,EAAAA,EAAAA,IAAYlC,GACvBmC,GAAWC,EAAAA,EAAAA,MAcf,OACE,SAAC,KAAD,CAAQC,cAAe,CACrBvB,KAAM,GACNwB,OAAQ,IAEFC,SAjBS,SAACC,EAAQC,GAE5B,IAAMC,EAAWF,EAAO1B,KAAKC,cACzBb,EAASyC,MAAK,qBAAG7B,KAAgBC,gBAAkB2B,CAArC,IAChBE,MAAM,GAAD,OAAIJ,EAAO1B,KAAX,8BAIPqB,GAASU,EAAAA,EAAAA,IAAWL,IACpBC,EAAQK,YACP,EAGC,UAKI,UAACtB,EAAD,CAAeuB,aAAa,MAA5B,WACA,SAACrB,EAAD,CACEsB,QAASlB,EADX,mBAKE,SAACH,EAAD,CACIsB,GAAInB,EACJoB,KAAK,OACLpC,KAAK,OACLqC,QAAQ,yHACR/B,MAAM,yIACNgC,UAAQ,KAEZ,SAAC1B,EAAD,CACEsB,QAAShB,EADX,qBAKF,SAACL,EAAD,CACIsB,GAAIjB,EACJkB,KAAK,MACLpC,KAAK,SACLqC,QAAQ,yFACR/B,MAAM,+FACNgC,UAAQ,KAEV,SAACvB,EAAD,CACEqB,KAAK,SADP,6BAQX,EClEYG,EAAOnC,EAAAA,GAAAA,GAAH,6ECAJoC,EAAWpC,EAAAA,GAAAA,GAAH,kDAIRqC,EAAcrC,EAAAA,GAAAA,KAAH,iDAIXsC,EAAatC,EAAAA,GAAAA,OAAH,8CCLVuC,EAAkB,SAAC,GAAuC,IAAD,IAApC5C,QAAWoC,EAAyB,EAAzBA,GAAInC,EAAqB,EAArBA,KAAMwB,EAAe,EAAfA,OAEjDH,GAAWC,EAAAA,EAAAA,MAEf,OACE,UAACkB,EAAD,YACM,4BAAOxC,EAAP,SAAqB,SAACyC,EAAD,UAAcjB,KACnC,SAACkB,EAAD,CAAYN,KAAK,SAASQ,QAAS,kBAAMvB,GAASwB,EAAAA,EAAAA,IAAcV,GAA7B,EAAnC,sBAGT,ECVYW,EAAc,WAEvB,IAAMC,GAAkB3B,EAAAA,EAAAA,IAAYxB,GAEpC,OACI,SAAC2C,EAAD,UACKQ,EAAgBC,KAAI,SAAAjD,GAAO,OACxB,SAAC4C,EAAD,CAAkC5C,QAASA,GAArBA,EAAQoC,GADN,KAKvC,ECdYc,EAAc7C,EAAAA,GAAAA,MAAH,wFAKX8C,EAAc9C,EAAAA,GAAAA,MAAH,8M,UCDlB+C,GAAWlC,EAAAA,EAAAA,MAEJmC,EAAS,WAClB,IAAMzD,GAASyB,EAAAA,EAAAA,IAAY1B,GACrB2B,GAAWC,EAAAA,EAAAA,MAIjB,OACM,UAAC2B,EAAD,CAAaf,QAASiB,EAAtB,oCAEM,SAACD,EAAD,CACIf,GAAIgB,EACJf,KAAK,OACLiB,MAAO1D,EACP2D,SATC,SAAAC,GAAK,OAAIlC,GAASmC,EAAAA,EAAAA,GAAkBD,EAAME,cAAcJ,OAAnD,MAazB,ECWD,EAzBkB,WACd,IAAMhC,GAAWC,EAAAA,EAAAA,OAGjBoC,EAAAA,EAAAA,YAAU,WACNrC,GAASsC,EAAAA,EAAAA,MACZ,GAAE,CAACtC,IAEJ,IAAM9B,GAAY6B,EAAAA,EAAAA,IAAY9B,GACxBG,GAAQ2B,EAAAA,EAAAA,IAAY5B,GAE1B,OACI,UAACW,EAAD,YACI,SAAC,EAAD,CAASG,MAAM,YAAf,UACI,SAACa,EAAD,OAEJ,SAACiC,EAAD,KACA,SAAC,EAAD,CAAS9C,MAAM,WAAf,SACKf,GAAY,wCACTE,GAAQ,yBAAMA,KAAe,SAACqD,EAAD,QAIhD,C","sources":["redux/contacts/selectors.js","pages/Phonebook.styled.js","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Phonebook.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterContacts) => {\n    if (!filterContacts) return contacts;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterContacts.toLowerCase())\n    );\n  }\n);","import styled from \"styled-components\";\n\nexport const Container = styled.div `\n  padding: 24px;\n` \n","import styled from \"styled-components\";\n\nexport const Header = styled.h2 `\n  padding: 16px 0;\n`","import PropTypes from 'prop-types';\n\nimport { Header } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n    return (\n        <div>\n            <Header>{title}</Header>\n            {children}\n        </div>\n    )\n}\n\nexport default Section;\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.any.isRequired,\n}","import styled from 'styled-components'\nimport {  Form, Field } from 'formik';\n\nexport const FormContainer = styled(Form)`\n  border: 1px solid black;\n  padding: 10px;\n  width: 350px;\n`\nexport const Label = styled.label `\n  display: block;\n  margin-bottom: 5px;\n`\nexport const Input = styled(Field) `\n  display: block;\n  margin-bottom: 20px;\n  border: 1px solid black;\n  cursor: pointer;\n\n  &:hover, \n  &:focus {\n    box-shadow: 0px 0px 5px #359ccb;\n  }\n`\nexport const Button = styled.button `\n  border: none;\n  border-radius: 5px;\n  padding: 5px 10px;\n  box-shadow: 0px 0px 2px black;\n  cursor: pointer;\n`\n","import { Formik } from 'formik';\nimport { FormContainer, Label, Input, Button } from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst nameContact = nanoid();\nconst numberContact = nanoid();\n\nexport const ContactForm = () => {\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    \n    const normName = values.name.toLowerCase();\n    if (contacts.find(({ name }) => name.toLowerCase() === normName)) {\n      alert(`${values.name} is already in contacts!`);\n      return;\n    }\n  \n    dispatch(addContact(values));\n    actions.resetForm();\n    }\n    \n    return (\n      <Formik initialValues={{\n        name: '',\n        number: '',\n      }}\n              onSubmit={handleSubmit}>\n          <FormContainer autoComplete='off'>\n          <Label\n            htmlFor={nameContact}\n            >\n              Name\n            </Label>\n            <Input\n                id={nameContact}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n            <Label\n              htmlFor={numberContact}\n            >\n              Number\n            </Label>\n          <Input\n              id={numberContact}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <Button\n              type='submit'\n            >\n              Add contact\n            </Button> \n          </FormContainer>\n        </Formik>\n    )  \n}\n","import styled from \"styled-components\";\n\nexport const List = styled.ul `\n    list-style-type: disc;\n    padding-left: 20px;\n`\n","import styled from \"styled-components\";\n\nexport const ListItem = styled.li `\n    margin-bottom: 10px;\n`\n\nexport const PhoneNumber = styled.span`\n    margin-right: 10px;\n`\n\nexport const ContsctBtn = styled.button `\n    cursor: pointer;\n`","import React from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ListItem, ContsctBtn, PhoneNumber } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact: { id, name, number } }) => {\n  \nconst dispatch = useDispatch();\n   \n  return (\n    <ListItem>\n          <span>{name}: </span><PhoneNumber>{number}</PhoneNumber>\n          <ContsctBtn type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</ContsctBtn>\n    </ListItem>\n  );\n};\n","import { List } from './ContactList.styled';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n    \n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    return (\n        <List>\n            {visibleContacts.map(contact => (\n                <ContactListItem key={contact.id} contact={contact} />\n            ))}\n        </List>\n    )\n}\n","import styled from \"styled-components\";\n    \nexport const LabelFilter = styled.label `\n  display: block;\n  padding-top: 20px;\n  margin-bottom: 5px;\n`\nexport const InputFilter = styled.input `\n  display: block;\n  margin-bottom: 20px;\n  margin-top: 10px;\n  border: 1px solid black;\n  cursor: pointer;\n\n  &:hover, \n  &:focus {\n   box-shadow: 0px 0px 5px #359ccb;\n  }\n`\n","import { LabelFilter, InputFilter } from './Filter.styled'\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst filterId = nanoid();\n\nexport const Filter = () => {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const onChange = event => dispatch(setFilterContacts(event.currentTarget.value));\n    \n    return (\n          <LabelFilter htmlFor={filterId}>\n                Fined contscts by name\n                <InputFilter\n                    id={filterId}\n                    type=\"text\"\n                    value={filter}\n                    onChange={onChange}\n                />\n        </LabelFilter>\n    )\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectIsLoading, selectError } from \"redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\n\nimport { Container } from './Phonebook.styled';\nimport Section from '../components/Section/Section';\nimport { ContactForm }  from '../components/ContactForm/ContactForm';\nimport { ContactList} from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\n\nconst Phonebook = () => {\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    \n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    return (\n        <Container>\n            <Section title=\"Phonebook\">\n                <ContactForm />\n            </Section>\n            <Filter />\n            <Section title=\"Contacts\">\n                {isLoading ? <div>Loading...</div> :\n                    error ? <div>{error}</div> : <ContactList />}\n            </Section>\n        </Container>\n    );\n}\n\nexport default Phonebook;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","filterContacts","contact","name","toLowerCase","includes","Container","styled","Header","title","children","propTypes","PropTypes","FormContainer","Form","Label","Input","Field","Button","nameContact","nanoid","numberContact","ContactForm","useSelector","dispatch","useDispatch","initialValues","number","onSubmit","values","actions","normName","find","alert","addContact","resetForm","autoComplete","htmlFor","id","type","pattern","required","List","ListItem","PhoneNumber","ContsctBtn","ContactListItem","onClick","deleteContact","ContactList","visibleContacts","map","LabelFilter","InputFilter","filterId","Filter","value","onChange","event","setFilterContacts","currentTarget","useEffect","fetchContacts"],"sourceRoot":""}